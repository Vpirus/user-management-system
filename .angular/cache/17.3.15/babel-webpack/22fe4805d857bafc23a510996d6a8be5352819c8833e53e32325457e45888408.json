{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services\";\nexport class JwtInterceptor {\n  constructor(accountService) {\n    this.accountService = accountService;\n  }\n  intercept(request, next) {\n    // add auth header with jwt account if logged in and request is to the api url\n    const account = this.accountService.accountValue;\n    const isLoggedIn = account && account.jwtToken;\n    const isApiUrl = request.url.startsWith(environment.apiUrl);\n    if (isLoggedIn && isApiUrl) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${account.jwtToken}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n  static {\n    this.ɵfac = function JwtInterceptor_Factory(t) {\n      return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: JwtInterceptor,\n      factory: JwtInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["environment","JwtInterceptor","constructor","accountService","intercept","request","next","account","accountValue","isLoggedIn","jwtToken","isApiUrl","url","startsWith","apiUrl","clone","setHeaders","Authorization","handle","i0","ɵɵinject","i1","AccountService","factory","ɵfac"],"sources":["C:\\Users\\Gerard Tan\\Desktop\\GROUP-PROJECT\\New folder\\user-management-system\\src\\app\\_helpers\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from '../../environments/environment';\r\nimport { AccountService } from '../_services';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n    constructor(private accountService: AccountService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // add auth header with jwt account if logged in and request is to the api url\r\n        const account = this.accountService.accountValue;\r\n        const isLoggedIn = account && account.jwtToken;\r\n        const isApiUrl = request.url.startsWith(environment.apiUrl);\r\n        if (isLoggedIn && isApiUrl) {\r\n            request = request.clone({\r\n                setHeaders: { Authorization: `Bearer ${account.jwtToken}` }\r\n                });\r\n        }\r\n        \r\n        return next.handle(request);\r\n    }\r\n}"],"mappings":"AAIA,SAASA,WAAW,QAAQ,gCAAgC;;;AAI5D,OAAM,MAAOC,cAAc;EACvBC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;EAAoB;EAEtDC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IAClD;IACA,MAAMC,OAAO,GAAG,IAAI,CAACJ,cAAc,CAACK,YAAY;IAChD,MAAMC,UAAU,GAAGF,OAAO,IAAIA,OAAO,CAACG,QAAQ;IAC9C,MAAMC,QAAQ,GAAGN,OAAO,CAACO,GAAG,CAACC,UAAU,CAACb,WAAW,CAACc,MAAM,CAAC;IAC3D,IAAIL,UAAU,IAAIE,QAAQ,EAAE;MACxBN,OAAO,GAAGA,OAAO,CAACU,KAAK,CAAC;QACpBC,UAAU,EAAE;UAAEC,aAAa,EAAE,UAAUV,OAAO,CAACG,QAAQ;QAAE;OACxD,CAAC;IACV;IAEA,OAAOJ,IAAI,CAACY,MAAM,CAACb,OAAO,CAAC;EAC/B;;;uBAfSJ,cAAc,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;IAAA;EAAA;;;aAAdrB,cAAc;MAAAsB,OAAA,EAAdtB,cAAc,CAAAuB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}