{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../_services\";\nexport class AuthGuard {\n  constructor(router, accountService) {\n    this.router = router;\n    this.accountService = accountService;\n  }\n  canActivate(route, state) {\n    const account = this.accountService.accountValue;\n    if (!account) {\n      this.router.navigate(['/account/login']);\n      return false;\n    }\n    // Check for admin role\n    if (account.role !== 'Admin' && state.url.includes('/admin')) {\n      this.router.navigate(['/']);\n      return false;\n    }\n    return true;\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AccountService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthGuard","constructor","router","accountService","canActivate","route","state","account","accountValue","navigate","role","url","includes","i0","ɵɵinject","i1","Router","i2","AccountService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Gerard Tan\\Desktop\\GROUP-PROJECT\\New folder\\user-management-system\\src\\app\\_helpers\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { AccountService } from '../_services';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard {\r\n    constructor(\r\n        private router: Router,\r\n        private accountService: AccountService\r\n    ) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n        const account = this.accountService.accountValue;\r\n        if (!account) {\r\n            this.router.navigate(['/account/login']);\r\n            return false;\r\n        }\r\n        // Check for admin role\r\n        if (account.role !== 'Admin' && state.url.includes('/admin')) {\r\n            this.router.navigate(['/']);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}"],"mappings":";;;AAMA,OAAM,MAAOA,SAAS;EAClBC,YACYC,MAAc,EACdC,cAA8B;IAD9B,KAAAD,MAAM,GAANA,MAAM;IACN,KAAAC,cAAc,GAAdA,cAAc;EACtB;EAEJC,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IACjE,MAAMC,OAAO,GAAG,IAAI,CAACJ,cAAc,CAACK,YAAY;IAChD,IAAI,CAACD,OAAO,EAAE;MACV,IAAI,CAACL,MAAM,CAACO,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC;MACxC,OAAO,KAAK;IAChB;IACA;IACA,IAAIF,OAAO,CAACG,IAAI,KAAK,OAAO,IAAIJ,KAAK,CAACK,GAAG,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;MAC1D,IAAI,CAACV,MAAM,CAACO,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAC3B,OAAO,KAAK;IAChB;IACA,OAAO,IAAI;EACf;;;uBAlBST,SAAS,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA;IAAA;EAAA;;;aAATlB,SAAS;MAAAmB,OAAA,EAATnB,SAAS,CAAAoB,IAAA;MAAAC,UAAA,EADI;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}