{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Alert, AlertType } from '../_models';\nimport * as i0 from \"@angular/core\";\nexport class AlertService {\n  constructor() {\n    this.subject = new Subject();\n    this.defaultId = 'default-alert';\n  }\n  // enable subscribing to alerts observable\n  onAlert(id = this.defaultId) {\n    return this.subject.asObservable().pipe(filter(x => x && x.id === id));\n  }\n  // convenience methods - now using this.alert() properly\n  success(message, options) {\n    this.alert(new Alert({\n      ...options,\n      type: AlertType.Success,\n      message\n    }));\n  }\n  error(message, options) {\n    this.alert(new Alert({\n      ...options,\n      type: AlertType.Error,\n      message\n    }));\n  }\n  info(message, options) {\n    this.alert(new Alert({\n      ...options,\n      type: AlertType.Info,\n      message\n    }));\n  }\n  warn(message, options) {\n    this.alert(new Alert({\n      ...options,\n      type: AlertType.Warning,\n      message\n    }));\n  }\n  // core alert method\n  alert(alert) {\n    alert.id = alert.id || this.defaultId;\n    alert.autoClose = alert.autoClose === undefined ? true : alert.autoClose;\n    this.subject.next(alert);\n  }\n  // clear alerts\n  clear(id = this.defaultId) {\n    this.subject.next(new Alert({\n      id\n    }));\n  }\n  static {\n    this.ɵfac = function AlertService_Factory(t) {\n      return new (t || AlertService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AlertService,\n      factory: AlertService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Subject","filter","Alert","AlertType","AlertService","constructor","subject","defaultId","onAlert","id","asObservable","pipe","x","success","message","options","alert","type","Success","error","Error","info","Info","warn","Warning","autoClose","undefined","next","clear","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Gerard Tan\\Desktop\\GROUP-PROJECT\\New folder\\user-management-system\\src\\app\\_services\\alert.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\n\r\nimport { Alert, AlertType } from '../_models';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AlertService {\r\n    private subject = new Subject<Alert>();\r\n    private defaultId = 'default-alert';\r\n\r\n    // enable subscribing to alerts observable\r\n    onAlert(id = this.defaultId): Observable<Alert> {\r\n        return this.subject.asObservable().pipe(filter(x => x && x.id === id));\r\n    }\r\n\r\n    // convenience methods - now using this.alert() properly\r\n    success(message: string, options?: any) {\r\n        this.alert(new Alert({ ...options, type: AlertType.Success, message }));\r\n    }\r\n\r\n    error(message: string, options?: any) {\r\n        this.alert(new Alert({ ...options, type: AlertType.Error, message }));\r\n    }\r\n\r\n    info(message: string, options?: any) {\r\n        this.alert(new Alert({ ...options, type: AlertType.Info, message }));\r\n    }\r\n\r\n    warn(message: string, options?: any) {\r\n        this.alert(new Alert({ ...options, type: AlertType.Warning, message }));\r\n    }\r\n\r\n    // core alert method\r\n    alert(alert: Alert) {\r\n        alert.id = alert.id || this.defaultId;\r\n        alert.autoClose = alert.autoClose === undefined ? true : alert.autoClose;\r\n        this.subject.next(alert);\r\n    }\r\n\r\n    // clear alerts\r\n    clear(id = this.defaultId) {\r\n        this.subject.next(new Alert({ id }));\r\n    }\r\n}\r\n"],"mappings":"AACA,SAAqBA,OAAO,QAAQ,MAAM;AAC1C,SAASC,MAAM,QAAQ,gBAAgB;AAEvC,SAASC,KAAK,EAAEC,SAAS,QAAQ,YAAY;;AAG7C,OAAM,MAAOC,YAAY;EADzBC,YAAA;IAEY,KAAAC,OAAO,GAAG,IAAIN,OAAO,EAAS;IAC9B,KAAAO,SAAS,GAAG,eAAe;;EAEnC;EACAC,OAAOA,CAACC,EAAE,GAAG,IAAI,CAACF,SAAS;IACvB,OAAO,IAAI,CAACD,OAAO,CAACI,YAAY,EAAE,CAACC,IAAI,CAACV,MAAM,CAACW,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC1E;EAEA;EACAI,OAAOA,CAACC,OAAe,EAAEC,OAAa;IAClC,IAAI,CAACC,KAAK,CAAC,IAAId,KAAK,CAAC;MAAE,GAAGa,OAAO;MAAEE,IAAI,EAAEd,SAAS,CAACe,OAAO;MAAEJ;IAAO,CAAE,CAAC,CAAC;EAC3E;EAEAK,KAAKA,CAACL,OAAe,EAAEC,OAAa;IAChC,IAAI,CAACC,KAAK,CAAC,IAAId,KAAK,CAAC;MAAE,GAAGa,OAAO;MAAEE,IAAI,EAAEd,SAAS,CAACiB,KAAK;MAAEN;IAAO,CAAE,CAAC,CAAC;EACzE;EAEAO,IAAIA,CAACP,OAAe,EAAEC,OAAa;IAC/B,IAAI,CAACC,KAAK,CAAC,IAAId,KAAK,CAAC;MAAE,GAAGa,OAAO;MAAEE,IAAI,EAAEd,SAAS,CAACmB,IAAI;MAAER;IAAO,CAAE,CAAC,CAAC;EACxE;EAEAS,IAAIA,CAACT,OAAe,EAAEC,OAAa;IAC/B,IAAI,CAACC,KAAK,CAAC,IAAId,KAAK,CAAC;MAAE,GAAGa,OAAO;MAAEE,IAAI,EAAEd,SAAS,CAACqB,OAAO;MAAEV;IAAO,CAAE,CAAC,CAAC;EAC3E;EAEA;EACAE,KAAKA,CAACA,KAAY;IACdA,KAAK,CAACP,EAAE,GAAGO,KAAK,CAACP,EAAE,IAAI,IAAI,CAACF,SAAS;IACrCS,KAAK,CAACS,SAAS,GAAGT,KAAK,CAACS,SAAS,KAAKC,SAAS,GAAG,IAAI,GAAGV,KAAK,CAACS,SAAS;IACxE,IAAI,CAACnB,OAAO,CAACqB,IAAI,CAACX,KAAK,CAAC;EAC5B;EAEA;EACAY,KAAKA,CAACnB,EAAE,GAAG,IAAI,CAACF,SAAS;IACrB,IAAI,CAACD,OAAO,CAACqB,IAAI,CAAC,IAAIzB,KAAK,CAAC;MAAEO;IAAE,CAAE,CAAC,CAAC;EACxC;;;uBApCSL,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAyB,OAAA,EAAZzB,YAAY,CAAA0B,IAAA;MAAAC,UAAA,EADC;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}