{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, finalize } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/accounts`;\nexport class AccountService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.accountSubject = new BehaviorSubject(null);\n    this.account = this.accountSubject.asObservable();\n  }\n  get accountValue() {\n    return this.accountSubject.value;\n  }\n  login(email, password) {\n    return this.http.post(`${baseUrl}/authenticate`, {\n      email,\n      password\n    }, {\n      withCredentials: true\n    }).pipe(map(account => {\n      this.accountSubject.next(account);\n      this.startRefreshTokenTimer();\n      return account;\n    }));\n  }\n  logout() {\n    this.http.post(`${baseUrl}/revoke-token`, {}, {\n      withCredentials: true\n    }).subscribe();\n    this.stopRefreshTokenTimer();\n    this.accountSubject.next(null); // Fixed: Allow null\n    this.router.navigate(['/account/login']);\n  }\n  refreshToken() {\n    return this.http.post(`${baseUrl}/refresh-token`, {}, {\n      withCredentials: true\n    }).pipe(map(account => {\n      this.accountSubject.next(account);\n      this.startRefreshTokenTimer();\n      return account;\n    }));\n  }\n  register(account) {\n    return this.http.post(`${baseUrl}/register`, account);\n  }\n  verifyEmail(token) {\n    return this.http.post(`${baseUrl}/verify-email`, {\n      token\n    });\n  }\n  forgotPassword(email) {\n    return this.http.post(`${baseUrl}/forgot-password`, {\n      email\n    });\n  }\n  validateResetToken(token) {\n    return this.http.post(`${baseUrl}/validate-reset-token`, {\n      token\n    });\n  }\n  resetPassword(token, password, confirmPassword) {\n    return this.http.post(`${baseUrl}/reset-password`, {\n      token,\n      password,\n      confirmPassword\n    });\n  }\n  getAll() {\n    return this.http.get(baseUrl);\n  }\n  getById(id) {\n    return this.http.get(`${baseUrl}/${id}`);\n  }\n  create(params) {\n    return this.http.post(baseUrl, params);\n  }\n  update(id, params) {\n    return this.http.put(`${baseUrl}/${id}`, params).pipe(map(account => {\n      // Use optional chaining for null safety\n      if (account.id === this.accountValue?.id) {\n        account = {\n          ...this.accountValue,\n          ...account\n        };\n        this.accountSubject.next(account);\n      }\n      return account;\n    }));\n  }\n  delete(id) {\n    return this.http.delete(`${baseUrl}/${id}`).pipe(finalize(() => {\n      // Use optional chaining for null safety\n      if (id === this.accountValue?.id) this.logout();\n    }));\n  }\n  startRefreshTokenTimer() {\n    // Guard against null or undefined jwtToken\n    if (!this.accountValue || !this.accountValue.jwtToken) {\n      return;\n    }\n    // parse json object from base64 encoded jwt token\n    const jwtToken = JSON.parse(atob(this.accountValue.jwtToken.split('.')[1]));\n    // set a timeout to refresh the token a minute before it expires\n    const expires = new Date(jwtToken.exp * 1000);\n    const timeout = expires.getTime() - Date.now() - 60 * 1000;\n    this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n  }\n  stopRefreshTokenTimer() {\n    clearTimeout(this.refreshTokenTimeout);\n  }\n  static {\n    this.ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","map","finalize","environment","baseUrl","apiUrl","AccountService","constructor","router","http","accountSubject","account","asObservable","accountValue","value","login","email","password","post","withCredentials","pipe","next","startRefreshTokenTimer","logout","subscribe","stopRefreshTokenTimer","navigate","refreshToken","register","verifyEmail","token","forgotPassword","validateResetToken","resetPassword","confirmPassword","getAll","get","getById","id","create","params","update","put","delete","jwtToken","JSON","parse","atob","split","expires","Date","exp","timeout","getTime","now","refreshTokenTimeout","setTimeout","clearTimeout","i0","ɵɵinject","i1","Router","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Gerard Tan\\Desktop\\GROUP-PROJECT\\New folder\\user-management-system\\src\\app\\_services\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, finalize } from 'rxjs/operators';\r\n\r\nimport { environment } from '../../environments/environment';\r\nimport { Account } from '../_models';\r\n\r\nconst baseUrl = `${environment.apiUrl}/accounts`;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AccountService {\r\n    private accountSubject: BehaviorSubject<Account | null>; \r\n    public account: Observable<Account | null>;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private http: HttpClient\r\n    ) {\r\n        this.accountSubject = new BehaviorSubject<Account | null>(null); \r\n        this.account = this.accountSubject.asObservable();\r\n    }\r\n\r\n    public get accountValue(): Account | null { \r\n        return this.accountSubject.value;\r\n    }\r\n\r\n    login(email: string, password: string) {\r\n        return this.http.post<any>(`${baseUrl}/authenticate`, { email, password }, { withCredentials: true })\r\n            .pipe(map(account => {\r\n                this.accountSubject.next(account);\r\n                this.startRefreshTokenTimer();\r\n                return account;\r\n            }));\r\n    }\r\n\r\n    logout() {\r\n        this.http.post<any>(`${baseUrl}/revoke-token`, {}, { withCredentials: true }).subscribe();\r\n        this.stopRefreshTokenTimer();\r\n        this.accountSubject.next(null); // Fixed: Allow null\r\n        this.router.navigate(['/account/login']);\r\n    }\r\n\r\n    refreshToken() {\r\n        return this.http.post<any>(`${baseUrl}/refresh-token`, {}, { withCredentials: true })\r\n            .pipe(map((account) => {\r\n                this.accountSubject.next(account);\r\n                this.startRefreshTokenTimer();\r\n                return account;\r\n            }));\r\n    }\r\n\r\n    register(account: Account) {\r\n        return this.http.post(`${baseUrl}/register`, account);\r\n    }\r\n\r\n    verifyEmail(token: string) {\r\n        return this.http.post(`${baseUrl}/verify-email`, { token });\r\n    }\r\n\r\n    forgotPassword(email: string) {\r\n        return this.http.post(`${baseUrl}/forgot-password`, { email });\r\n    }\r\n\r\n    validateResetToken(token: string) {\r\n        return this.http.post(`${baseUrl}/validate-reset-token`, { token });\r\n    }\r\n\r\n    resetPassword(token: string, password: string, confirmPassword: string) {\r\n        return this.http.post(`${baseUrl}/reset-password`, { token, password, confirmPassword });\r\n    }\r\n\r\n    getAll() {\r\n        return this.http.get<Account[]>(baseUrl);\r\n    }\r\n\r\n    getById(id: string) {\r\n        return this.http.get<Account>(`${baseUrl}/${id}`);\r\n    }\r\n\r\n    create(params: any) {\r\n        return this.http.post(baseUrl, params);\r\n    }\r\n\r\n    update(id: string, params: any) {\r\n        return this.http.put(`${baseUrl}/${id}`, params)\r\n            .pipe(map((account: any) => {\r\n                // Use optional chaining for null safety\r\n                if (account.id === this.accountValue?.id) {\r\n                    account = { ...this.accountValue, ...account };\r\n                    this.accountSubject.next(account);\r\n                }\r\n                return account;\r\n            }));\r\n    }\r\n\r\n    delete(id: string) {\r\n        return this.http.delete(`${baseUrl}/${id}`)\r\n            .pipe(finalize(() => {\r\n                // Use optional chaining for null safety\r\n                if (id === this.accountValue?.id)\r\n                    this.logout();\r\n            }));\r\n    }\r\n\r\n    // helper methods\r\n    \r\n    private refreshTokenTimeout: any; \r\n\r\n    private startRefreshTokenTimer() {\r\n        // Guard against null or undefined jwtToken\r\n        if (!this.accountValue || !this.accountValue.jwtToken) {\r\n            return;\r\n        }\r\n\r\n        // parse json object from base64 encoded jwt token\r\n        const jwtToken = JSON.parse(atob(this.accountValue.jwtToken.split('.')[1]));\r\n\r\n        // set a timeout to refresh the token a minute before it expires\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}